{"ast":null,"code":"var _jsxFileName = \"/home/mahim00zz/Climate_Aware/climate-dashboard/client/src/components/ConfigDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { get } from '@vercel/edge-config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fetchEdgeConfigValue = async key => {\n  const value = await get(key); // Retrieve data from Edge Config\n  return value;\n};\nconst ConfigDisplay = () => {\n  _s();\n  const [configValue, setConfigValue] = useState(null);\n  useEffect(() => {\n    const getConfig = async () => {\n      const value = await fetchEdgeConfigValue('db_connection_string'); // Or your specific config key\n      setConfigValue(value); // Store the retrieved value\n    };\n    getConfig(); // Trigger config fetch on mount\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Config Value: \", configValue ? configValue : \"Loading...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(ConfigDisplay, \"4JmfinZp6kayXK5Hu9JMLZhCYoA=\");\n_c = ConfigDisplay;\nexport default ConfigDisplay;\nvar _c;\n$RefreshReg$(_c, \"ConfigDisplay\");","map":{"version":3,"names":["React","useState","useEffect","get","jsxDEV","_jsxDEV","fetchEdgeConfigValue","key","value","ConfigDisplay","_s","configValue","setConfigValue","getConfig","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/mahim00zz/Climate_Aware/climate-dashboard/client/src/components/ConfigDisplay.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { get } from '@vercel/edge-config';\n\nconst fetchEdgeConfigValue = async (key) => {\n  const value = await get(key); // Retrieve data from Edge Config\n  return value;\n};\n\nconst ConfigDisplay = () => {\n  const [configValue, setConfigValue] = useState(null);\n\n  useEffect(() => {\n    const getConfig = async () => {\n      const value = await fetchEdgeConfigValue('db_connection_string'); // Or your specific config key\n      setConfigValue(value); // Store the retrieved value\n    };\n\n    getConfig(); // Trigger config fetch on mount\n  }, []);\n\n  return (\n    <div>\n      <h1>Config Value: {configValue ? configValue : \"Loading...\"}</h1>\n    </div>\n  );\n};\n\nexport default ConfigDisplay;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,GAAG,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,oBAAoB,GAAG,MAAOC,GAAG,IAAK;EAC1C,MAAMC,KAAK,GAAG,MAAML,GAAG,CAACI,GAAG,CAAC,CAAC,CAAC;EAC9B,OAAOC,KAAK;AACd,CAAC;AAED,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACd,MAAMW,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAML,KAAK,GAAG,MAAMF,oBAAoB,CAAC,sBAAsB,CAAC,CAAC,CAAC;MAClEM,cAAc,CAACJ,KAAK,CAAC,CAAC,CAAC;IACzB,CAAC;IAEDK,SAAS,CAAC,CAAC,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,oBACER,OAAA;IAAAS,QAAA,eACET,OAAA;MAAAS,QAAA,GAAI,gBAAc,EAACH,WAAW,GAAGA,WAAW,GAAG,YAAY;IAAA;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9D,CAAC;AAEV,CAAC;AAACR,EAAA,CAjBID,aAAa;AAAAU,EAAA,GAAbV,aAAa;AAmBnB,eAAeA,aAAa;AAAC,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}